package JavaKajak.runtime;

/*Generated by MPS */

import javax.swing.JPanel;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.UIManager;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.JFrame;
import java.awt.Dimension;
import java.awt.BorderLayout;
import javax.swing.JOptionPane;
import java.awt.Color;
import javax.swing.SwingUtilities;

public abstract class KajakFrame {
  private static final int HEIGHT = 12;
  private static final int WIDTH = 18;
  private static final int CELL_SIZE = 50;

  protected final int width = CELL_SIZE * WIDTH;
  protected final int height = CELL_SIZE * HEIGHT;
  protected final JPanel canvas = new JPanel(new GridLayout(HEIGHT, WIDTH), true);
  private int row = 1;
  private int col = 1;
  private Direction direction = Direction.east;
  private final Cell[][] world = new Cell[HEIGHT][WIDTH];
  private final JButton[][] visuals = new JButton[HEIGHT][WIDTH];

  public KajakFrame() {
  }

  public final void initializeComponents() {
    try {
      UIManager.setLookAndFeel(new MetalLookAndFeel());
    } catch (UnsupportedLookAndFeelException e) {
      throw new RuntimeException(e);
    }
    for (int i = 0; i < HEIGHT; i++) {
      for (int j = 0; j < WIDTH; j++) {
        boolean shouldBeWall = i == 0 || i == HEIGHT - 1 || j == 0 || j == WIDTH - 1;
        world[i][j] = new Cell(shouldBeWall);
        JButton button = new JButton(" ");
        button.setEnabled(false);
        visuals[i][j] = button;
        canvas.add(button);
      }

    }
    world[1][1].setKaja();
    JFrame frame = new JFrame("Robot Kaja");
    frame.setPreferredSize(new Dimension(width, height));
    frame.setResizable(false);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.add(BorderLayout.CENTER, canvas);
    frame.setVisible(true);
    frame.pack();
    updateUI();
  }

  public final void run() {
    perform();
  }

  protected abstract void perform();

  public void reportError(String msg) {
    JOptionPane.showMessageDialog(canvas, msg, "Error", JOptionPane.ERROR_MESSAGE);
  }

  protected Cell getCurrentCell() {
    return world[row][col];
  }

  protected Cell getNextCell() {
    switch (direction) {
      case north:
        return world[row - 1][col];
      case east:
        return world[row][col + 1];
      case south:
        return world[row + 1][col];
      case west:
        return world[row][col - 1];
      default:
        return null;
    }
  }

  protected void moveKaja() {
    getCurrentCell().unsetKaja();
    switch (direction) {
      case north:
        row -= 1;
        break;
      case east:
        col += 1;
        break;
      case south:
        row += 1;
        break;
      case west:
        col -= 1;
      default:
    }
    getCurrentCell().setKaja();
    updateUI();
  }

  protected void turnLeft() {
    switch (direction) {
      case north:
        direction = Direction.west;
        break;
      case east:
        direction = Direction.north;
        break;
      case south:
        direction = Direction.east;
        break;
      case west:
        direction = Direction.south;
      default:
    }
    updateUI();
  }

  protected boolean canMove() {
    return !(getNextCell().isWall());
  }

  protected void addMark() {
    getCurrentCell().addMark();
    updateUI();
  }

  protected void removeMark() {
    getCurrentCell().removeMark();
    updateUI();
  }

  protected boolean isWall() {
    return getNextCell().isWall();
  }

  protected boolean isMark() {
    return getCurrentCell().getMarks() > 0;
  }

  protected boolean heading(Direction direction) {
    return this.direction == direction;
  }

  protected boolean isFull() {
    return getCurrentCell().getMarks() == 8;
  }

  protected void pause() {
    try {
      Thread.sleep(500);
    } catch (InterruptedException e) {
    }
  }

  private void updateUI() {
    for (int i = 0; i < HEIGHT; i++) {
      for (int j = 0; j < WIDTH; j++) {
        Color cell = Color.WHITE;
        Cell worldCell = world[i][j];
        if (worldCell.isKaja()) {
          cell = Color.BLUE;
        }
        if (worldCell.isWall()) {
          cell = Color.RED;
        }
        final JButton currentVisual = visuals[i][j];
        final Color cellValue = cell;
        int marks = worldCell.getMarks();
        final String marksCaption = (marks > 0 ?
          "" + marks :
          ""
        );
        try {
          SwingUtilities.invokeAndWait(new Runnable() {
            public void run() {
              currentVisual.setBackground(cellValue);
              currentVisual.setText(marksCaption);
            }
          });
        } catch (Exception e) {
          throw new RuntimeException(e);
        }

      }
    }
  }
}
