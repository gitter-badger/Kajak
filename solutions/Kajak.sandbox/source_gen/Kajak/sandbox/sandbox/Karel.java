package Kajak.sandbox.sandbox;

/*Generated by MPS */

import JavaKajak.runtime.KajakFrame;
import JavaKajak.runtime.Direction;

public class Karel extends KajakFrame {
  public Karel() {
  }

  protected void perform() {
    if (canMove()) {
      moveKaja();
      pause();
    } else {
      reportError("Oops, There's a wall in front of me. I can't make a step forward.");
      return;
    }
    if (canMove()) {
      moveKaja();
      pause();
    } else {
      reportError("Oops, There's a wall in front of me. I can't make a step forward.");
      return;
    }
    while (!(heading(Direction.south))) {
      turnLeft();
      pause();
    }
    while (!(isWall())) {
      if (canMove()) {
        moveKaja();
        pause();
      } else {
        reportError("Oops, There's a wall in front of me. I can't make a step forward.");
        return;
      }
    }
    turnRight_routine();
    bounce_routine();
    // Routine definitions 
    // Bounces off the wall recursively 
  }

  public void turnRight_routine() {
    for (int i = 0; i < 3; i++) {
    }
  }

  public void turnAround_routine() {
    turnLeft();
    pause();
    turnLeft();
    pause();
  }

  public void bounce_routine() {
    if (isWall()) {
      turnAround_routine();
    } else {
      if (canMove()) {
        moveKaja();
        pause();
      } else {
        reportError("Oops, There's a wall in front of me. I can't make a step forward.");
        return;
      }
      bounce_routine();
      if (canMove()) {
        moveKaja();
        pause();
      } else {
        reportError("Oops, There's a wall in front of me. I can't make a step forward.");
        return;
      }
    }
  }

  public static void main(String[] args) {
    Karel script = new Karel();
    script.initializeComponents();
    script.run();
  }
}
