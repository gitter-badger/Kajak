package Kaja.sandbox.sandbox;

/*Generated by MPS */

import JavaKaja.runtime.KajaFrame;

public class Sample extends KajaFrame {
  public Sample() {
  }

  protected void perform() {
    if (isAllowedRow(1) && isAllowedCol(12)) {
      addWall(1, 12);
      minipause();

    } else {
      reportError("Attempted to build wall outside of the playground!");
    }
    if (isAllowedRow(3) && isAllowedCol(12)) {
      if (!(isFull(3, 12))) {
        addMark(3, 12);
        minipause();
      } else {
        reportError("Cannot drop. The cell is already full.");
        return;
      }
    } else {
      reportError("Attempted to drop marks outside of the playground!");
    }
    if (isAllowedRow(3) && isAllowedCol(12)) {
      if (!(isFull(3, 12))) {
        addMark(3, 12);
        minipause();
      } else {
        reportError("Cannot drop. The cell is already full.");
        return;
      }
    } else {
      reportError("Attempted to drop marks outside of the playground!");
    }
    if (isAllowedRow(4) && isAllowedCol(12)) {
      if (!(isFull(4, 12))) {
        addMark(4, 12);
        minipause();
      } else {
        reportError("Cannot drop. The cell is already full.");
        return;
      }
    } else {
      reportError("Attempted to drop marks outside of the playground!");
    }
    if (isAllowedRow(2) && isAllowedCol(15)) {
      if (!(isFull(2, 15))) {
        addMark(2, 15);
        minipause();
      } else {
        reportError("Cannot drop. The cell is already full.");
        return;
      }
    } else {
      reportError("Attempted to drop marks outside of the playground!");
    }
    while ((!(isWall()) && !(isMark()))) {
      if (canMove()) {
        moveKaja();
        pause();
      } else {
        reportError("Oops, There's a wall in front of me. I can't make a step forward.");
      }
    }
    turnRight_from_library_Common_routine();
    if (isAllowedRow(1) && isAllowedCol(10)) {
      addWall(1, 10);
      minipause();

    } else {
      reportError("Attempted to build wall outside of the playground!");
    }
    fillup_from_library_Filling_routine();
    if (canMove()) {
      moveKaja();
      pause();
    } else {
      reportError("Oops, There's a wall in front of me. I can't make a step forward.");
    }
    turnAround_from_library_Common_routine();
    if (canMove()) {
      moveKaja();
      pause();
    } else {
      reportError("Oops, There's a wall in front of me. I can't make a step forward.");
    }
    empty_from_library_Filling_routine();
    if (canMove()) {
      moveKaja();
      pause();
    } else {
      reportError("Oops, There's a wall in front of me. I can't make a step forward.");
    }
    turnAround_routine();
  }

  public void turnAround_routine() {
    turnAround_from_library_Common_routine();
    turnAround_from_library_Common_routine();
    if (!(isFull())) {
      addMark();
      pause();
    } else {
      reportError("Cannot drop. The cell is already full.");
    }
    if (!(isFull())) {
      addMark();
      pause();
    } else {
      reportError("Cannot drop. The cell is already full.");
    }
  }

  public void turnRight_from_library_Common_routine() {
    for (int indexVariable_kf1bs5_a0b = 0; indexVariable_kf1bs5_a0b < 3; indexVariable_kf1bs5_a0b++) {
      turnLeft();
      pause();
    }
  }

  public void turnAround_from_library_Common_routine() {
    turnLeft();
    pause();
    turnLeft();
    pause();
  }

  public void fetch_from_library_Common_routine() {
    if (isMark()) {
      if (isMark()) {
        removeMark();
        pause();
      } else {
        reportError("Nothing to pick. The cell is empty.");
      }
      turnAround_from_library_Common_routine();
    } else {
      if (canMove()) {
        moveKaja();
        pause();
      } else {
        reportError("Oops, There's a wall in front of me. I can't make a step forward.");
      }
      fetch_from_library_Common_routine();
      if (canMove()) {
        moveKaja();
        pause();
      } else {
        reportError("Oops, There's a wall in front of me. I can't make a step forward.");
      }
    }
  }

  public void fillup_from_library_Filling_routine() {
    while (!(isFull())) {
      if (!(isFull())) {
        addMark();
        pause();
      } else {
        reportError("Cannot drop. The cell is already full.");
      }
    }
  }

  public void empty_from_library_Filling_routine() {
    while (isMark()) {
      if (isMark()) {
        removeMark();
        pause();
      } else {
        reportError("Nothing to pick. The cell is empty.");
      }
    }
  }

  public static void main(String[] args) {
    Sample script = new Sample();
    script.initializeComponents();
    script.run();
  }
}
