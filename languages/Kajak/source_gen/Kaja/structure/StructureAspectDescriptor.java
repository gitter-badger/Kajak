package Kaja.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"Kaja.structure.AbstractCommand", "Kaja.structure.CommandList", "Kaja.structure.CommentLine", "Kaja.structure.Direction", "Kaja.structure.Drop", "Kaja.structure.East", "Kaja.structure.EmptyLine", "Kaja.structure.Heading", "Kaja.structure.IfStatement", "Kaja.structure.IsFull", "Kaja.structure.IsMark", "Kaja.structure.IsWall", "Kaja.structure.LeftTurn", "Kaja.structure.Library", "Kaja.structure.LogicalExpression", "Kaja.structure.North", "Kaja.structure.Not", "Kaja.structure.Pick", "Kaja.structure.Repeat", "Kaja.structure.Require", "Kaja.structure.RoutineCall", "Kaja.structure.RoutineDefinition", "Kaja.structure.Script", "Kaja.structure.South", "Kaja.structure.Step", "Kaja.structure.TraceMessage", "Kaja.structure.West", "Kaja.structure.While"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("Kaja.structure.CommandList", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("Kaja.structure.CommentLine", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{"text"}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("Kaja.structure.Direction", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 4:
        return new CompiledConceptDescriptor("Kaja.structure.Drop", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("Kaja.structure.East", "Kaja.structure.Direction", false, new String[]{"Kaja.structure.Direction"}, new String[]{}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("Kaja.structure.EmptyLine", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("Kaja.structure.Heading", "Kaja.structure.LogicalExpression", false, new String[]{"Kaja.structure.LogicalExpression"}, new String[]{}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("Kaja.structure.IfStatement", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      case 9:
        return new CompiledConceptDescriptor("Kaja.structure.IsFull", "Kaja.structure.LogicalExpression", false, new String[]{"Kaja.structure.LogicalExpression"}, new String[]{}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("Kaja.structure.IsMark", "Kaja.structure.LogicalExpression", false, new String[]{"Kaja.structure.LogicalExpression"}, new String[]{}, new String[]{});
      case 11:
        return new CompiledConceptDescriptor("Kaja.structure.IsWall", "Kaja.structure.LogicalExpression", false, new String[]{"Kaja.structure.LogicalExpression"}, new String[]{}, new String[]{});
      case 12:
        return new CompiledConceptDescriptor("Kaja.structure.LeftTurn", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      case 13:
        return new CompiledConceptDescriptor("Kaja.structure.Library", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 14:
        return new CompiledConceptDescriptor("Kaja.structure.LogicalExpression", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 15:
        return new CompiledConceptDescriptor("Kaja.structure.North", "Kaja.structure.Direction", false, new String[]{"Kaja.structure.Direction"}, new String[]{}, new String[]{});
      case 16:
        return new CompiledConceptDescriptor("Kaja.structure.Not", "Kaja.structure.LogicalExpression", false, new String[]{"Kaja.structure.LogicalExpression"}, new String[]{}, new String[]{});
      case 17:
        return new CompiledConceptDescriptor("Kaja.structure.Pick", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      case 18:
        return new CompiledConceptDescriptor("Kaja.structure.Repeat", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{"count"}, new String[]{});
      case 19:
        return new CompiledConceptDescriptor("Kaja.structure.Require", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{"library"});
      case 20:
        return new CompiledConceptDescriptor("Kaja.structure.RoutineCall", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{"definition"});
      case 21:
        return new CompiledConceptDescriptor("Kaja.structure.RoutineDefinition", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 22:
        return new CompiledConceptDescriptor("Kaja.structure.Script", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.util.structure.IMainClass"}, new String[]{"startX", "startY"}, new String[]{});
      case 23:
        return new CompiledConceptDescriptor("Kaja.structure.South", "Kaja.structure.Direction", false, new String[]{"Kaja.structure.Direction"}, new String[]{}, new String[]{});
      case 24:
        return new CompiledConceptDescriptor("Kaja.structure.Step", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      case 25:
        return new CompiledConceptDescriptor("Kaja.structure.TraceMessage", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{"message"}, new String[]{});
      case 26:
        return new CompiledConceptDescriptor("Kaja.structure.West", "Kaja.structure.Direction", false, new String[]{"Kaja.structure.Direction"}, new String[]{}, new String[]{});
      case 27:
        return new CompiledConceptDescriptor("Kaja.structure.While", "Kaja.structure.AbstractCommand", false, new String[]{"Kaja.structure.AbstractCommand"}, new String[]{}, new String[]{});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
