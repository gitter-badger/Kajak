package Kaja.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.template.MappingScriptContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IMapping;

public class QueriesGenerated {
  public static Object propertyMacro_GetPropertyValue_3308300503039570175(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_859008965969411038(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName("indexVariable", _context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_3308300503039660463(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), "count");
  }

  public static Object propertyMacro_GetPropertyValue_3308300503039701227(final IOperationContext operationContext, final PropertyMacroContext _context) {
    if (SNodeOperations.getAncestor(_context.getNode(), "Kaja.structure.Script", false, false) != null) {
      return SPropertyOperations.getString(_context.getNode(), "name") + "_routine";
    } else if (SNodeOperations.getAncestor(_context.getNode(), "Kaja.structure.Library", false, false) != null) {
      return SPropertyOperations.getString(_context.getNode(), "name") + "_library_routine_from_" + SPropertyOperations.getString(SNodeOperations.getAncestor(_context.getNode(), "Kaja.structure.Library", false, false), "name");
    } else {
      throw new IllegalArgumentException("The routine " + SPropertyOperations.getString(_context.getNode(), "name") + " seems to have no parent script nor library");
    }
  }

  public static Object propertyMacro_GetPropertyValue_6405700485436287841(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "text");
  }

  public static Object propertyMacro_GetPropertyValue_3210697320273781186(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "message");
  }

  public static Object referenceMacro_GetReferent_3308300503039701316(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(_context.getNode(), "definition", false), "routines");
  }

  public static SNode sourceNodeQuery_3308300503039580708(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_3308300503039720855(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_3308300503039647895(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_3308300503039939838(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "trueBranch", true);
  }

  public static SNode sourceNodeQuery_3308300503039939855(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "falseBranch", true);
  }

  public static SNode sourceNodeQuery_3308300503039654096(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "original", true);
  }

  public static SNode sourceNodeQuery_3308300503039939727(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_3308300503039667494(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_3308300503039939773(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_3308300503039683770(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "direction", true);
  }

  public static SNode sourceNodeQuery_3308300503039907032(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static Iterable sourceNodesQuery_3308300503039580700(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "commands", true);
  }

  public static Iterable sourceNodesQuery_3308300503039720845(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "definitions", true);
  }

  public static Iterable sourceNodesQuery_4394627182934963473(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "commands", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "Kaja.structure.Require");
      }
    });
  }

  public static Iterable sourceNodesQuery_4394627182934963575(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "Kaja.structure.Require"), "library", false), "definitions", true);
  }

  public static Iterable sourceNodesQuery_3308300503039928825(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "commands", true);
  }

  public static void mappingScript_CodeBlock_3308300503039700895(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> roots = SModelOperations.getRoots(_context.getModel(), "Kaja.structure.Script");
    ListSequence.fromList(roots).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(it, "body", true), "commands", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "Kaja.structure.RoutineDefinition");
          }
        });
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNode script = SNodeOperations.getAncestor(it, "Kaja.structure.Script", false, false);
        SNodeOperations.detachNode(it);
        ListSequence.fromList(SLinkOperations.getTargets(script, "definitions", true)).addElement(SNodeOperations.cast(it, "Kaja.structure.RoutineDefinition"));
      }
    });
  }

  public static void mappingScript_CodeBlock_3308300503039761163(final IOperationContext operationContext, final MappingScriptContext _context) {
    ListSequence.fromList(SModelOperations.getNodes(_context.getModel(), "Kaja.structure.EmptyLine")).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.deleteNode(it);
      }
    });
  }

  public static void mappingScript_CodeBlock_4394627182935101791(final IOperationContext operationContext, final MappingScriptContext _context) {
    ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "Kaja.structure.Script")).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode script) {
        final Iterable<SNode> requireCommands = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(script, "body", true), "commands", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "Kaja.structure.Require");
          }
        });

        Sequence.fromIterable(requireCommands).visitAll(new IVisitor<SNode>() {
          public void visit(final SNode requireCommand) {
            Iterable<SNode> definitions = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(requireCommand, "Kaja.structure.Require"), "library", false), "definitions", true);

            final Map<SNode, SNode> newToOld = MapSequence.fromMap(new HashMap<SNode, SNode>());

            Sequence.fromIterable(definitions).visitAll(new IVisitor<SNode>() {
              public void visit(final SNode definition) {
                final SNode copy = SNodeOperations.copyNode(definition);
                MapSequence.fromMap(newToOld).put(copy, definition);
                SPropertyOperations.set(copy, "name", SPropertyOperations.getString(definition, "name") + "_from_library_" + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(requireCommand, "Kaja.structure.Require"), "library", false), "name"));
                ListSequence.fromList(SLinkOperations.getTargets(script, "definitions", true)).addElement(copy);
                ListSequence.fromList(SNodeOperations.getDescendants(script, "Kaja.structure.RoutineCall", false, new String[]{})).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SLinkOperations.getTarget(it, "definition", false) == definition;
                  }
                }).visitAll(new IVisitor<SNode>() {
                  public void visit(SNode it) {
                    SLinkOperations.setTarget(it, "definition", copy, false);
                  }
                });
              }
            });
            SNodeOperations.deleteNode(requireCommand);

            MapSequence.fromMap(newToOld).visitAll(new IVisitor<IMapping<SNode, SNode>>() {
              public void visit(final IMapping<SNode, SNode> entry) {
                ListSequence.fromList(SNodeOperations.getDescendants(script, "Kaja.structure.RoutineCall", false, new String[]{})).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SLinkOperations.getTarget(it, "definition", false) == entry.value();
                  }
                }).visitAll(new IVisitor<SNode>() {
                  public void visit(SNode it) {
                    SLinkOperations.setTarget(it, "definition", entry.key(), false);
                  }
                });
              }
            });
          }
        });
      }
    });
  }
}
