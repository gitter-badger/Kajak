package Kaja.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class RoutineUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public RoutineUniqueness_NonTypesystemRule() {
  }

  public void applyRule(final SNode routineDefinition, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.getString(routineDefinition, "name") == null) {
      return;
    }
    Iterable<SNode> defs;
    SNode parentScript = SNodeOperations.getAncestor(routineDefinition, "Kaja.structure.Script", false, false);
    if (parentScript != null) {
      defs = ListSequence.fromList(SNodeOperations.getDescendants(parentScript, "Kaja.structure.RoutineDefinition", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(routineDefinition, "name").equals(SPropertyOperations.getString(it, "name"));
        }
      });
    } else {
      defs = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(routineDefinition, "Kaja.structure.Library", false, false), "definitions", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(routineDefinition, "name").equals(SPropertyOperations.getString(it, "name"));
        }
      });
    }
    if (Sequence.fromIterable(defs).count() > 1) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(routineDefinition, "Routine names must be unique within a Script or a Library", "r:af5f8eb9-49c0-4279-87d3-3c80b1a56988(Kaja.typesystem)", "1904811872814128956", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "Kaja.structure.RoutineDefinition";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
