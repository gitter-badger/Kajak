package Kaja.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class LibraryNameUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public LibraryNameUniqueness_NonTypesystemRule() {
  }

  public void applyRule(final SNode library, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<String> scriptNames = ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(library), "Kaja.structure.Script")).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, "name");
      }
    });
    Iterable<String> libraryNames = ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(library), "Kaja.structure.Library")).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, "name");
      }
    });
    List<String> allNames = ListSequence.fromListWithValues(new ArrayList<String>(), scriptNames);
    ListSequence.fromList(allNames).addSequence(Sequence.fromIterable(libraryNames));
    if (ListSequence.fromList(allNames).where(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return it != null && it.equals(SPropertyOperations.getString(library, "name"));
      }
    }).count() > 1) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(library, "Script and Library names must be unique", "r:af5f8eb9-49c0-4279-87d3-3c80b1a56988(Kaja.typesystem)", "1904811872814168242", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "Kaja.structure.Library";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
