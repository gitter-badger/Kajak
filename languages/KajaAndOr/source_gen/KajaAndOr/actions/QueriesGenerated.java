package KajaAndOr.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;

public class QueriesGenerated {
  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_LogicalOperator_1904811872814312765(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("KajaAndOr.structure.LogicalOperator");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode orNode = SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(), "KajaAndOr.structure.Or");
            SLinkOperations.setTarget(orNode, "left", SLinkOperations.getTarget(_context.getCurrentTargetNode(), "left", true), true);
            SLinkOperations.setTarget(orNode, "right", SLinkOperations.getTarget(_context.getCurrentTargetNode(), "right", true), true);
            return orNode;
          }

          public boolean hasSubstitute() {
            return true;
          }

          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(), "KajaAndOr.structure.And");
          }

          public String getMatchingText(String pattern) {
            return "or";
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_LogicalExpression_1904811872814253599(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("Kaja.structure.LogicalExpression");
      Computable computable = new Computable() {
        public Object compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "and", "or");
        }
      };
      Iterable<String> parameterObjects = (Iterable<String>) computable.compute();
      assert parameterObjects != null;
      for (final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode conjuction;
            if ((item).equals("and")) {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "KajaAndOr.structure.And");
            } else if ((item).equals("or")) {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "KajaAndOr.structure.Or");
            } else {
              throw new IllegalArgumentException("Cannot find a match for " + (item));
            }
            SLinkOperations.setTarget(conjuction, "right", _context.getSourceNode(), true);
            return SLinkOperations.getTarget(conjuction, "left", true);
          }

          public String getMatchingText(String pattern) {
            return (item);
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_LogicalExpression_1904811872814296399(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("Kaja.structure.LogicalExpression");
      Computable computable = new Computable() {
        public Object compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "and", "or");
        }
      };
      Iterable<String> parameterObjects = (Iterable<String>) computable.compute();
      assert parameterObjects != null;
      for (final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode conjuction;
            if ((item).equals("and")) {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "KajaAndOr.structure.And");
            } else {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "KajaAndOr.structure.Or");
            }
            SLinkOperations.setTarget(conjuction, "left", _context.getSourceNode(), true);
            return SLinkOperations.getTarget(conjuction, "right", true);
          }

          public String getMatchingText(String pattern) {
            return (item);
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_LogicalOperator_1904811872814419789(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("Kaja.structure.LogicalExpression");
      Computable computable = new Computable() {
        public Object compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "and", "or");
        }
      };
      Iterable<String> parameterObjects = (Iterable<String>) computable.compute();
      assert parameterObjects != null;
      for (final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode conjuction;
            if ((item).equals("and")) {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "KajaAndOr.structure.And");
            } else {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "KajaAndOr.structure.Or");
            }
            SLinkOperations.setTarget(conjuction, "left", SLinkOperations.getTarget(_context.getSourceNode(), "left", true), true);
            return SLinkOperations.setTarget(conjuction, "right", SLinkOperations.getTarget(_context.getSourceNode(), "right", true), true);
          }

          public String getMatchingText(String pattern) {
            return (item);
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }
}
